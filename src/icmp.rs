use crate::senders::Packet;
use crate::senders::PacketType;

const DATA: [u8; 48] = [
    0x1b, 0x2f, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
];

pub struct IcmpRequest {
    icmp_type: u8,
    pub code: u8,
    icmp_checksum: u16,
    identifier: u16,
    sequence_number: u16,
    data: [u8; 48],
    pub raw_icmp_bytes: Vec<u8>,
}

impl IcmpRequest {
    pub fn new() -> Self {
        let mut temp = IcmpRequest {
            icmp_type: 8,
            code: 0,
            icmp_checksum: 0,
            identifier: 0,
            sequence_number: 0,
            data: DATA,
            raw_icmp_bytes: Vec::new(),
        };

        temp = IcmpRequest::set_raw_icmp_bytes(temp);
        temp.icmp_checksum = calculate_checksum(&mut temp.raw_icmp_bytes);
        temp = IcmpRequest::set_raw_icmp_bytes(temp);
        temp
    }

    fn set_raw_icmp_bytes(mut icmp: IcmpRequest) -> IcmpRequest {
        let mut v: Vec<u8> = Vec::new();

        //type
        v.extend_from_slice(&icmp.icmp_type.to_be_bytes());

        //code
        v.extend_from_slice(&icmp.code.to_be_bytes());

        //checksum
        v.extend_from_slice(&icmp.icmp_checksum.to_be_bytes());

        //identifier
        v.extend_from_slice(&icmp.identifier.to_be_bytes());

        //sequence number
        v.extend_from_slice(&icmp.sequence_number.to_be_bytes());

        //data
        v.extend_from_slice(&icmp.data);

        icmp.raw_icmp_bytes = v;

        icmp
    }
}

fn calculate_checksum(bytes: &mut Vec<u8>) -> u16 {
    //split bytes into 16 bit chunks
    if bytes.len() % 2 != 0 {
        bytes.push(0_u8)
    }; //if odd number of bytes, add one more byte of 0
       //as padding

    let transform_to_u16 = |slice: &[u8]| {
        let a: u16 = slice[0] as u16;
        let new: u16 = a << 8;
        new + slice[1] as u16
    };

    let words: Vec<u16> = bytes.chunks(2).into_iter().map(transform_to_u16).collect();

    let mut sum: u16 = 0;
    
    for word in words {
        let (s, overflows) = sum.overflowing_add(word);
        sum = if overflows {
            let (result, _) = sum.carrying_add(word, true);
            result
        } else {
            s
        };
    }

    !sum
}

impl Packet for IcmpRequest {
    fn raw_bytes(&self) -> &Vec<u8> {
        &self.raw_icmp_bytes
    }

    fn packet_type(&self) -> PacketType {
        PacketType::IcmpRequest
    }

    fn dest_address(&self) -> Option<Vec<u8>> {
        None
    }

    fn source_address(&self) -> Option<Vec<u8>> {
        None
    }
}

impl<'a> TryFrom<&'a [u8]> for IcmpRequest {
    type Error = &'static str;

    fn try_from(bytes: &'a [u8]) -> Result<Self, Self::Error> {
        let icmp_type: u8 = bytes[0];
        let code: u8 = bytes[1];
        let icmp_checksum: u16 = (bytes[2] as u16).checked_shl(8).unwrap() + bytes[3] as u16;
        let identifier: u16 = (bytes[4] as u16).checked_shl(8).unwrap() + bytes[5] as u16;
        let sequence_number = (bytes[6] as u16).checked_shl(8).unwrap() + bytes[7] as u16;
        let mut data: [u8; 48] = [0; 48];
        for (i, _) in data.into_iter().enumerate() {
            data[i] = bytes[i + 8];
        }

        Ok(IcmpRequest {
            icmp_type,
            code,
            icmp_checksum,
            identifier,
            sequence_number,
            data,
            raw_icmp_bytes: Vec::new(),
        })
    }
}

#[cfg(test)]
mod tests {

    use super::{calculate_checksum, IcmpRequest, DATA};

    #[test]
    fn raw_icmp_bytes_works() {
        //The ref_bytes reference test data is the ICMP Header byte sequence generated by Ping in Linux when
        //pinging 8.8.8.8.
        //The following bytes will be skipped while testing:
        //  -> ICMP Checksum, Identifier, Sequence Number, and Timestamp

        let ref_bytes: [u8; 64] = [
            0x08, 0x00, 0x0c, 0x17, 0x72, 0xe8, 0x00, 0x01, 0x08, 0x9b, 0x8b, 0x62, 0x00, 0x00,
            0x00, 0x00, 0x1b, 0x2f, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21,
            0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        ];

        let icmp_request = IcmpRequest::new();

        assert_eq!(ref_bytes[0..2], icmp_request.raw_icmp_bytes[0..2]);
        //skip Checksum, Identifier, Sequence Number, and Timestamp
        assert_eq!(ref_bytes[16..], icmp_request.raw_icmp_bytes[8..]);
    }

    #[test]
    #[ignore]
    fn calculate_checksum_works() {
        unimplemented!();
    }

    #[test]
    fn valid_icmp_packet_created_from_bytes() {
        //received_bytes are taken contents of icmp reply received from 8.8.8.8 after pinging from Linux.
        let received_bytes = &[
            0x00, 0x00, 0x1a, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x2f, 0x0b, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
            0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
            0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        ]
        .to_vec()[..];

        let expected = IcmpRequest {
            icmp_type: 0,
            code: 0,
            icmp_checksum: 6910,
            identifier: 0,
            sequence_number: 0,
            data: DATA,
            raw_icmp_bytes: Vec::new(),
        };

        let test_icmp_packet = IcmpRequest::try_from(received_bytes).unwrap();

        assert_eq!(test_icmp_packet.icmp_type, expected.icmp_type);
        assert_eq!(test_icmp_packet.code, expected.code);
        assert_eq!(test_icmp_packet.icmp_checksum, expected.icmp_checksum);
        assert_eq!(test_icmp_packet.identifier, expected.identifier);
        assert_eq!(test_icmp_packet.sequence_number, expected.sequence_number);
        assert_eq!(test_icmp_packet.data, expected.data);
    }
}
